# -*- coding: utf-8 -*-
"""CTU_Draw_BBox.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12eYxUeYBGtrtkLjo_nK9J0lwX7RVKa79
"""

import cv2
import os
import xml.etree.ElementTree as ET
from PIL import Image
from tqdm.notebook import tqdm
from PIL import ImageFont, ImageDraw
font = ImageFont.truetype("DejaVuSans.ttf", 20)
import numpy as np

# load images from folder
def load_images_from_folder(path):
    if path.endswith('.jpg'):
        img = Image.open(path)
    else:
        pass
    return img

# load xml files from folder
def load_annotation_from_folder(path):
    if path.endswith('.xml'):
        tree = ET.parse(path)
        root = tree.getroot()
    else:
        pass
    return root

# define colors
def get_color(type):
    if (type== 'table'):
      return (0, 255, 0) 
    elif (type == 'figure'):
      return(0, 0, 255)
    elif (type == 'caption'):
      return (255, 255, 0)
    elif (type == 'formula'):
      return (255, 0, 0)
    else:
      return (0,0,0)

# drawing bounding boxes and labels
def draw_bbox_label(image, root, save_folder,file_name):

  if image.mode == 'L':
      image = image.convert('RGB')
  draw = ImageDraw.Draw(image, 'RGBA')
  for element in root:
    if (element.tag=='object'):
      # Draw bbox
      draw.rectangle(
          (int(element[4][0].text),
          int(element[4][1].text),
          int(element[4][2].text),
          int(element[4][3].text)),
          outline=get_color(element[0].text),width = 5
      )
      w, h = draw.textsize(text=element[0].text, font = font)
      if (int(element[4][3].text) < h):
          draw.rectangle(
              (int(element[4][0].text) + int(element[4][2].text),
                int(element[4][1].text),
                int(element[4][0].text) + int(element[4][2].text) + w,
                int(element[4][1].text) + h),
                fill=(64, 64, 64, 255)
          )
          draw.text(
              (int(element[4][0].text) + int(element[4][2].text),
              int(element[4][1].text)),
              text=element[0].text,
              fill=(255, 255, 255, 255),
              font=font
          )
      else:
          draw.rectangle(
              (int(element[4][0].text),
              int(element[4][1].text),
              int(element[4][0].text) + w,
              int(element[4][1].text) + h),
              fill=(64, 64, 64, 255)
          )
          draw.text(
              (int(element[4][0].text),
              int(element[4][1].text)),
              text=element[0].text,
              fill=(255, 255, 255, 255),
              font=font
          )

  image.save(os.path.join(save_folder,file_name))

xml_Folder = '2/'
bbox_Folder = '2_Annotation'

# create an empty folder to save image with bounding box
try:
    os.mkdir(bbox_Folder)
except:
    pass
#list number of image
img_folder = img_folder = [img for img in os.listdir(xml_Folder) if img.endswith('.jpg')]
nb_img = len(img_folder)

for img in tqdm(range(nb_img)):
    # print('Drawling bounding box for image ', img_folder[img])
    img_name = img_folder[img]
    name = img_name.split('.')[0]

    image = load_images_from_folder(xml_Folder + img_name)
    root = load_annotation_from_folder(xml_Folder + name + '.xml')
    draw_bbox_label(image, root, bbox_Folder, name + '.jpg')

